type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
                    .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 7)
                            .value("column", 4)
                            .value("price", 8)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "7",
                    "column", "4"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 7)
                                .value("column", 4)
                                .value("price", 8)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
        };
    }
  learner_created: false
- name: src/cinema/Seat.java
  visible: true
  text: |-
    package cinema;


    import java.lang.reflect.Array;
    import java.util.UUID;

    public class Seat {

        private int row;
        private int column;
        private int price;

        public Seat() {
        }

        public Seat( int row, int column, int price ) {
            this.row = row;
            this.column = column;
            this.price = price;
        }

        public int getPrice() {
            return price;
        }

        public void setPrice( int price ) {
            this.price = price;
        }

        public int getRow() {
            return row;
        }

        public void setRow( int row ) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn( int column ) {
            this.column = column;
        }
    }
  learner_created: true
- name: src/cinema/Ticket.java
  visible: true
  text: |
    package cinema;


    import java.util.UUID;

    class Ticket {

        private UUID token;
        private Seat ticket;

        public Ticket() {
        }

        public Ticket( Seat ticket ) {
            this.token = UUID.randomUUID();
            this.ticket = ticket;
        }

        public UUID getToken() {
            return token;
        }

        public void setToken( UUID token ) {
            this.token = token;
        }

        public Seat getTicket() {
            return ticket;
        }

        public void setTicket( Seat ticket ) {
            this.ticket = ticket;
        }
    }

    class ReturnedTicket {

        private Seat returned_ticket;

        public ReturnedTicket( Seat returned_ticket ) {
            this.returned_ticket = returned_ticket;
        }

        public Seat getReturned_ticket() {
            return returned_ticket;
        }

        public void setReturned_ticket( Seat returned_ticket ) {
            this.returned_ticket = returned_ticket;
        }
    }
  learner_created: true
- name: src/cinema/seatController.java
  visible: true
  text: |-
    package cinema;

    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;

    import java.util.List;
    import java.util.Map;
    import java.util.concurrent.ConcurrentHashMap;

    import org.springframework.boot.web.servlet.error.ErrorController;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    @RestController
    public class seatController implements ErrorController {
        private final int TOTAL_ROWS = 9, TOTAL_COLUMNS = 9;
        Theatre theatre = new Theatre( TOTAL_ROWS, TOTAL_COLUMNS );

        @GetMapping("/seats")
        public Theatre getAvailableSeats() {
            return theatre;
        }

        @PostMapping("/purchase")
        public ResponseEntity<?> purchaseSeat( @RequestBody Seat seat ) {
            return theatre.purchase( seat );
        }

        @PostMapping("/return")
        public ResponseEntity<?> purchaseSeat( @RequestBody Ticket ticket ) {
            return theatre.refund( ticket );
        }
    }
  learner_created: true
- name: src/cinema/Theatre.java
  visible: true
  text: |+
    package cinema;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;

    import java.util.ArrayList;
    import java.util.Map;

    public class Theatre {

        private int total_rows;
        private int total_columns;
        private ArrayList<Seat> available_seats = new ArrayList<>();
        @JsonIgnore
        private ArrayList<Ticket> purchasedTickets = new ArrayList<>();
        @JsonIgnore
        private final int PRICE_SWITCH = 4, PRICE_HIGH = 10, PRICE_LOW = 8;

        public Theatre( int total_rows, int total_columns ) {
            this.total_rows = total_rows;
            this.total_columns = total_columns;
            initAllSeats( total_rows, total_columns );
        }

        private void initAllSeats( int total_rows, int total_columns ) {
            for ( int i = 1; i <= total_rows; i++ ) {
                for ( int j = 1; j <= total_columns; j++ ) {
                    available_seats.add( new Seat( i, j, i <= PRICE_SWITCH ? PRICE_HIGH : PRICE_LOW ) );
                }
            }
        }

        public ResponseEntity<?> purchase( Seat seat ) {

            int column = seat.getColumn();
            int row = seat.getRow();

            // validate row & column input
            if ( column > 9 || row > 9 || row < 1 || column < 1 ) {
                return new ResponseEntity<>( Map.of( "error", "The number of a row or a column is out of bounds!" )
                        , HttpStatus.BAD_REQUEST );
            }

            // check seat available + generate Ticket + purchase(remove from availableSeats array)
            for ( int i = 0; i < this.getAvailable_seats().size(); i++ ) {

                seat = this.getAvailable_seats().get( i );

                if ( seat.getRow() == row && seat.getColumn() == column ) {
                    Ticket ticket = new Ticket( seat );
                    this.getPurchasedTickets().add( ticket );
                    this.getAvailable_seats().remove( i );
                    return new ResponseEntity<>( ticket, HttpStatus.OK );
                }
            }

            // if not found
            return new ResponseEntity<>( Map.of( "error", "The ticket has been already purchased!" )
                    , HttpStatus.BAD_REQUEST );
        }

        public ResponseEntity<?> refund( Ticket ticket ) {

            // search for + restore available seat + remove sold ticket
            for ( int i = 0; i < purchasedTickets.size(); i++ ) {

                if ( purchasedTickets.get( i ).getToken().equals( ticket.getToken() ) ) {

                    available_seats.add( purchasedTickets.get( i ).getTicket() );
                    ReturnedTicket returned_ticket = new ReturnedTicket( purchasedTickets.get( i ).getTicket() );
                    purchasedTickets.remove( purchasedTickets.get( i ) );

                    return new ResponseEntity<>( returned_ticket, HttpStatus.OK );
                }
            }

            // if not found
            return new ResponseEntity<>( Map.of( "error", "Wrong token!" )
                    , HttpStatus.BAD_REQUEST );

        }

        @JsonIgnore
        public ArrayList<Ticket> getPurchasedTickets() {
            return purchasedTickets;
        }

        @JsonIgnore
        public void setPurchasedTickets( ArrayList<Ticket> purchasedTickets ) {
            this.purchasedTickets = purchasedTickets;
        }

        @JsonIgnore
        public int getPRICE_SWITCH() {
            return PRICE_SWITCH;
        }

        @JsonIgnore
        public int getHIGHER_PRICE() {
            return PRICE_HIGH;
        }

        @JsonIgnore
        public int getPRICE_LOW() {
            return PRICE_LOW;
        }

        public int getTotal_rows() {
            return total_rows;
        }

        public void setTotal_rows( int total_rows ) {
            this.total_rows = total_rows;
        }

        public int getTotal_columns() {
            return total_columns;
        }

        public void setTotal_columns( int total_columns ) {
            this.total_columns = total_columns;
        }

        public ArrayList<Seat> getAvailable_seats() {
            return available_seats;
        }

        public void setAvailable_seats( ArrayList<Seat> available_seats ) {
            this.available_seats = available_seats;
        }
    }


  learner_created: true
- name: src/cinema/Password.java
  visible: true
  learner_created: true
- name: src/cinema/Statistics.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/189/stages/948/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Tue, 23 Aug 2022 09:06:44 UTC
record: -1
